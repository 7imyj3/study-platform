import { ZodSchema } from 'zod';
import type { ValidationTargets } from 'hono';
export declare const zValidator: <T extends ZodSchema, Target extends keyof ValidationTargets>(target: Target, schema: T) => import("hono").MiddlewareHandler<import("hono").Env, string, {
    in: (undefined extends (T extends ZodSchema<any, import("zod").ZodTypeDef, any> ? import("zod").input<T> : T extends import("zod/v4/core").$ZodType<unknown, unknown, import("zod/v4/core").$ZodTypeInternals<unknown, unknown>> ? import("zod/v4").input<T> : never) ? true : false) extends true ? { [K in Target]?: ((T extends ZodSchema<any, import("zod").ZodTypeDef, any> ? import("zod").input<T> : T extends import("zod/v4/core").$ZodType<unknown, unknown, import("zod/v4/core").$ZodTypeInternals<unknown, unknown>> ? import("zod/v4").input<T> : never) extends infer T_1 ? T_1 extends (T extends ZodSchema<any, import("zod").ZodTypeDef, any> ? import("zod").input<T> : T extends import("zod/v4/core").$ZodType<unknown, unknown, import("zod/v4/core").$ZodTypeInternals<unknown, unknown>> ? import("zod/v4").input<T> : never) ? T_1 extends ValidationTargets[K] ? T_1 : { [K2 in keyof T_1]?: ValidationTargets[K][K2] | undefined; } : never : never) | undefined; } : { [K_1 in Target]: (T extends ZodSchema<any, import("zod").ZodTypeDef, any> ? import("zod").input<T> : T extends import("zod/v4/core").$ZodType<unknown, unknown, import("zod/v4/core").$ZodTypeInternals<unknown, unknown>> ? import("zod/v4").input<T> : never) extends infer T_2 ? T_2 extends (T extends ZodSchema<any, import("zod").ZodTypeDef, any> ? import("zod").input<T> : T extends import("zod/v4/core").$ZodType<unknown, unknown, import("zod/v4/core").$ZodTypeInternals<unknown, unknown>> ? import("zod/v4").input<T> : never) ? T_2 extends ValidationTargets[K_1] ? T_2 : { [K2_1 in keyof T_2]: ValidationTargets[K_1][K2_1]; } : never : never; };
    out: { [K_2 in Target]: T extends ZodSchema<any, import("zod").ZodTypeDef, any> ? import("zod").output<T> : T extends import("zod/v4/core").$ZodType<unknown, unknown, import("zod/v4/core").$ZodTypeInternals<unknown, unknown>> ? import("zod/v4").infer<T> : never; };
}>;
//# sourceMappingURL=zValidator-wrapper.d.ts.map